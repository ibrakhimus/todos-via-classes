import React, { useState } from "react";
import TodoItem from "./TodoItem";
import AddTodo from "./AddTodo";

export const TodoParent = () => {
  const startingState = [
    
      { id: 1, title: "go out", completed: false },
      { id: 2, title: "Go home", completed: false },
      { id: 3, title: "Apple sauce", completed: false },
    
  ];
  
 const [todoArray, setTodoArray] = useState(startingState); 


 const markComplete = (id) => {
    console.log("Toggling item " + id);
    
    const toggleTargetItem = ((todo) => {

      if (todo.id === id) {

        todo = { ...todo, completed: !todo.completed };
      }

      return todo;
    });

    const newArrayOfTodoItems = setTodoArray.map(toggleTargetItem);

    const newState = {
      todo: newArrayOfTodoItems,
    };

    // this.setState(newState);
    
     setTodoArray(newState);
    

    // We could also do all of the above steps in a single statement:
    // this.setState(
    //   // create a new 'state' object literal here
    //   {
    //     // 'todo' field should be set to a new array of todo items
    //     // (map will produce this new array for us)
    //     todo: this.state.todo.map((todo, index) => {
    //       if (todo.id === id) {
    //         // Only make a copy for the one object that has changed
    //         todo = { ...todo, completed: !todo.completed };
    //       }

    //       // We'll reuse objects that haven't changed,
    //       // (this wilal also return the new version of the 1 object we want to toggle)
    //       return todo;
    //     }),
    //   }
    // );
  };

  const addTodo = (newTitle) => {
    console.log("addTodo: " + newTitle);
    // This is (hopefully) more clear because it separates out individual steps
    const nextIdNumber = todoArray.length + 1;
    const newTodo = { id: nextIdNumber, title: newTitle, completed: false };
    const newTodoArray = [...todoArray];
    newTodoArray.push(newTodo); // add to the end
    // JavaScript is ok with us changing a const array because
    // the array itself isn't changing ("just" the contents)
    // so it technically doesn't violate const

     newTodoArray.push(newTodo); // add to the end

     setTodoArray(newTodoArray);

    
    newTodoArray.sort((a, b) => a.title.localeCompare(b.title));

  

    // const newState = { todo: newTodoArray };
    // this.setState(newState);

    // You can also do this all in a single statement.
    // It actually does all the same steps, just all smooshed together :)
    // this.setState({
    //   todo: [
    //     ...this.state.todo,
    //     { id: this.state.todo.length + 1, title: newTitle, completed: false },
    //   ],
    // })
  };

  // produce a block of HTML/JS (JSX, technically)
  // that will show a single todo item:
  const makeOneTodoItem = (prop) => (
    <TodoItem
      key={prop.id} // React wants a unique 'key' for each item
      todo={prop} // This is passed to the TodoItem component
      markComplete={markComplete} // This is passed to the TodoItem component
    />
  );

  
    return (


      <div>
        {
          // Run this function once for each item in the todo array:
          todoArray.map(makeOneTodoItem)
        }

        <AddTodo addTodoItem={addTodo} />
      </div>
    );
  }

export default TodoParent;
